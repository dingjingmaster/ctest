export STAGING_DIR=/home/midas-zhou/openwrt_widora/staging_dir
COMMON_USRDIR=/home/midas-zhou/openwrt_widora/staging_dir/target-mipsel_24kec+dsp_uClibc-0.9.33.2/usr/

CC= $(STAGING_DIR)/toolchain-mipsel_24kec+dsp_gcc-4.8-linaro_uClibc-0.9.33.2/bin/mipsel-openwrt-linux-gcc

#### ----- 产生文件列表 ------
SRC_FILES = $(wildcard *.c)
OBJS = $(patsubst %.c, %.o, $(SRC_FILES))

### --- exclude objs -----
OBJS := $(OBJS:tmp_app.o= )

DEP_FILES = $(patsubst %.c,%.dep,$(SRC_FILES))

APPS = test_color

EXTRA_OBJS = iot/egi_iotclient.o utils/egi_utils.o utils/egi_iwinfo.o utils/egi_fifo.o \
	     utils/egi_filo.o utils/egi_cstring.o


#### -----  编译标志 -----
## -Wall for __attribut__ // -I$(COMMON_USRDIR)/include (for jpeg)
CFLAGS = -I./ -I./iot -I./utils -I$(COMMON_USRDIR)/include -I$(COMMON_USRDIR)/include/json-c
CFLAGS += -Wall -O2
#### --- for debug, put before LDFLAGS!!!! ----
#CFLAGS += -O -g -DEGI_DEBUG

LDFLAGS += -L./lib -L$(COMMON_USRDIR)/lib
LIBS += -ljpeg -lm -lpthread -ljson-c


#----- 打印依赖文件  include $(DEP_FILES)
#-----如果前面有include命令，那么make命令只会执行下面all中的第一个依赖文件，除非用make all完整命令
#-----把 include &(DEP_FILES) 防到后面就 OK了。
#----在Makefile中$$var才相当于shell中的$var
$(warning "----- all:$(APPS) -----")
all:  $(APPS)
	@for var in $(APPS);\
	do \
		cat $$var.dep; \
	done

$(warning "----- %:%.c -----")


#### ------ 手动设置特定目标生成规则  ------
####----- !!!! manually edit here !!!! -----
test_color: $(OBJS) $(EXTRA_OBJS)
	$(CC) $(CFLAGS) $(LDFLAGS) $(LIBS) $(OBJS) $(EXTRA_OBJS) -o test_color


#### ----- 目标文件自动生成规则 -----
%:%.c $(DEP_FILES)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $@.c


#### ----- 清除目标 -----
clean:
	rm -rf $(OBJS) $(EXTRA_OBJS) $(APPS) $(DEP_FILES)

include $(DEP_FILES)

$(warning "----- %.dep: %.c -----")

#### ---- 依赖文件自动生成规则 -----
%.dep: %.c
	@set -e; rm -f $@
	@$(CC) -MM $(CFLAGS) $< > $@.123
	@sed 's,\($*\)\.o[: ]*,\1 : ,g' < $@.123 > $@
	cat $@.123

#------- \1 表示第一个$(*)所代表的内容
	@rm -f $@.123


#----- 下面这个会被执行两遍 ---------
$(warning "----- end -----")

#-------------------------------------------------------------------------------------------
#
#  自动依赖的例子：
#  midas-zhou@midas-hp:~/apptest$ gcc -MM fbin_r.c | sed 's,\($*\)\.o[: ]*,\1 : ,g'
#  fbin_r : fbin_r.c fbin.h
#
#   gcc -M fbin_r.c 会将标准库的头文件也包括进来，用 gcc -MM 就不会了。
#
#-------------------------------------------------------------------------------------------
