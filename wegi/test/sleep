Makefile:export STAGING_DIR=/home/midas-zhou/openwrt_widora/staging_dir
Makefile:COMMON_USRDIR=/home/midas-zhou/openwrt_widora/staging_dir/target-mipsel_24kec+dsp_uClibc-0.9.33.2/usr
Makefile:SRC_PATH=/home/midas-zhou/Ctest/wegi
Makefile:CC= $(STAGING_DIR)/toolchain-mipsel_24kec+dsp_gcc-4.8-linaro_uClibc-0.9.33.2/bin/mipsel-openwrt-linux-gcc
Makefile:# !!!--- to be created and cleaned ---!!!
Makefile:CFLAGS  = -I$(SRC_PATH) -I$(SRC_PATH)/utils  -I$(SRC_PATH)/iot -I$(SRC_PATH)/sound
Makefile:CFLAGS += -I$(COMMON_USRDIR)/include
Makefile:CFLAGS += -I$(COMMON_USRDIR)/include/freetype2
Makefile:CFLAGS += -I$(COMMON_USRDIR)/include/json-c
Makefile:#-I$(SRC_PATH)/page
Makefile:CFLAGS  += -Wall -O2
Makefile:CFLAGS  += -D_GNU_SOURCE
Makefile:LDFLAGS += -L$(SRC_PATH)/lib -L$(COMMON_USRDIR)/lib
Makefile:LIBS	=  -lepages
Makefile:LIBS    += -lesound
Makefile:LIBS	+= -lpng -lz -lm -pthread -ljpeg -lasound
Makefile:LIBS	+= -lcurl -lssl -lcrypto -pthread
Makefile:LIBS	+= -lubox -lubus -lblobmsg_json -ljson_script -ljson-c
Makefile:LIBS    += -lfreetype  -lm -lz -lbz2
Makefile:#--- use static or dynamic libs -----
Makefile:#### --- use dynamic and static libs in compilatoin!!! ---
Makefile:# 1. Exclude dynamic -legi first.
Makefile:# 2. Use -Wl,Bdynamic and -Wl,Bstatic to switch to dynamic/static libs
Makefile:# 4. Source/obj files must be put before all -Wl.
Makefile:### 		----- A template for making test app -----
Makefile:	$(CC) $(TEST_NAME).c -o $(TEST_NAME) $(CFLAGS) $(LDFLAGS) -Wl,-Bdynamic $(LIBS) \
Makefile:-Wl,-Bstatic -legi -Wl,-Bdynamic
Makefile:	$(CC) -o $(TEST_NAME) $(TEST_NAME).c $(CFLAGS) $(LDFLAGS) $(LIBS) -legi -lesound
Makefile:### 			------ template end -----
Makefile:	$(CC) test_etouch.c -o test_etouch  $(CFLAGS) $(LDFLAGS) -Wl,-Bdynamic $(LIBS) \
Makefile:-Wl,-Bstatic -legi -lesound -Wl,-Bdynamic
Makefile:	$(CC) -o test_etouch test_etouch.c $(CFLAGS) $(LDFLAGS) $(LIBS) -legi -lesound
Makefile:#	$(CC) test_txt.c -o test_txt  $(CFLAGS) $(LDFLAGS) -Wl,-Bdynamic $(LIBS) \
Makefile:#-Wl,-Bstatic -legi -lesound -Wl,-Bdynamic
Makefile:#	$(CC) -o test_txt test_txt.c $(CFLAGS) $(LDFLAGS) $(LIBS) -legi -lesound
Makefile:#	$(CC) test_img.c -o test_img  $(CFLAGS) $(LDFLAGS) -Wl,-Bdynamic $(LIBS) \
Makefile:#-Wl,-Bstatic -legi -lesound -Wl,-Bdynamic
Makefile:#	$(CC) -o test_img test_img.c $(CFLAGS) $(LDFLAGS) $(LIBS) -legi -lesound
Makefile:	$(CC) show_pic.c -o show_pic  $(CFLAGS) $(LDFLAGS) -Wl,-Bdynamic $(LIBS) \
Makefile:-Wl,-Bstatic -legi -lesound -Wl,-Bdynamic
Makefile:	$(CC) -o test_img show_pic.c $(CFLAGS) $(LDFLAGS) $(LIBS) -legi -lesound
Makefile:	$(CC) test_bigiot.c -o test_bigiot $(OBJ_IOT) $(CFLAGS) $(LDFLAGS) -Wl,-Bdynamic $(LIBS) \
Makefile:-Wl,-Bstatic -legi -Wl,-Bdynamic
Makefile:#	$(CC) -o test_math test_math.c $(CFLAGS) $(LDFLAGS) $(LIBS) -legi  #--use shared egilib
Makefile:	$(CC) test_math.c -o test_math $(CFLAGS) $(LDFLAGS) -Wl,-Bdynamic $(LIBS) \
Makefile:-Wl,-Bstatic -legi -Wl,-Bdynamic
Makefile:#---use static egilib
Makefile:#	$(CC) -o test_math test_math.c $(CFLAGS) $(LDFLAGS) $(LIBS) -legi  #--use shared egilib
Makefile:	$(CC) test_fft.c -o test_fft $(CFLAGS) $(LDFLAGS) -Wl,-Bdynamic $(LIBS) \
Makefile:-Wl,-Bstatic -legi -Wl,-Bdynamic
Makefile:#---use static egilib
Makefile:#	$(CC) -o test_math test_math.c $(CFLAGS) $(LDFLAGS) $(LIBS) -legi  #--use shared egilib
Makefile:	$(CC) test_sndfft.c -o test_sndfft $(CFLAGS) $(LDFLAGS) -Wl,-Bdynamic $(LIBS) \
Makefile:-Wl,-Bstatic -legi -lesound -Wl,-Bdynamic
Makefile:#---use static egilib
Makefile:#	$(CC) -o test_math test_math.c $(CFLAGS) $(LDFLAGS) $(LIBS) -legi  #--use shared egilib
Makefile:	$(CC) test_tonefft.c -o test_tonefft $(CFLAGS) $(LDFLAGS) -Wl,-Bdynamic $(LIBS) \
Makefile:-Wl,-Bstatic -legi -lesound -Wl,-Bdynamic
Makefile:#---use static egilib
Makefile:### !!! NOTE: put '-o $@  $@.c' ahead of FLAGS and LIBS !!!!
Makefile:	$(CC) -o $@  $@.c $(CFLAGS) $(LDFLAGS) $(LIBS) -legi
Makefile:#	$(CC)  $(CFLAGS) $(LDFLAGS) $(LIBS)  $@.c -o $@
Makefile:	rm -rf *.o $(APPS) $(OBJ_IOT)
show_pic.c:/*-----------------------------------------------------------------
show_pic.c:------------------------------------------------------------------*/
show_pic.c:                return -1;
show_pic.c:                return -2;
show_pic.c:	EGI_BOX	 box={ {0-230/2,0-130/2}, {240-230/2-1,320-130/2-1} };
show_pic.c:	//EGI_BOX  box={ {0-100,0-150},{240-1-100,320-1-150} };
show_pic.c:	//EGI_BOX  box={ {0,0},{240-picw-poffx-1,320-pich-poffy-symh-1}};
show_pic.c:        egi_imgbuf_windisplay( imgbuf, &gv_fb_dev, -1,         /* img, FB, subcolor */
show_pic.c:                               0, 0, imgbuf->width, imgbuf->height   /* xw, yw, winw,  winh */
show_pic.c:	printf("---------- loading '%s' -----------\n", fpaths[i]);
show_pic.c:				   -1,			/* image canvan color, <0 for transparent */
show_pic.c:	data_pic->title="EGI_PIC";
show_pic.c:        			  -1,	     /* int frame */
show_pic.c:				  -1	//WEGI_COLOR_GRAY /* int prmcolor,applys only if prmcolor>=0  */
show_pic.c:	dex=(240/3 > (pic_box->width)/3) ? (pic_box->width)/3 : (240/3);
show_pic.c:	dey=(320/3 > (pic_box->height)/3) ? (pic_box->height)/3 : (320/3);
show_pic.c:	box.startxy=(EGI_POINT){ 240-(pic_box->width)-dex, 320-(pic_box->height)+dey }; /* -x(dex) ,+y(dey) */
show_pic.c:	box.endxy= (EGI_POINT){0+dex, 0-dey};  /* +x(dex), -y(dey) */
show_pic.c://	box.startxy=(EGI_POINT){ 240-(pic_box->width)-100, 320-(pic_box->height)+150 }; /* -x(100) ,+y(150) */
show_pic.c://	box.endxy= (EGI_POINT){0+100, 0-150};  /* +x(100), -y(150) */
show_pic.c:		pic_box->x0=pxy.x;
show_pic.c:		pic_box->y0=pxy.y;
show_pic.c:	pic_box->free(pic_box);
test_bigiot.c:/*----------------------------------------------------------------------------------------------
test_bigiot.c:------------------------------------------------------------------------------------------------*/
test_bigiot.c:/*------------------------------------
test_bigiot.c:------------------------------------*/
test_bigiot.c:	/* --- init logger --- */
test_bigiot.c:		return -1;
test_bigiot.c:        /* --- start egi tick --- */
test_bigiot.c:        /* --- prepare fb device --- */
test_bigiot.c://       gv_fb_dev.fdfd=-1;
test_bigiot.c:	/* --- load all symbol pages --- */
test_bmpjpg.c:/*-------------------------------------------------------------------
test_bmpjpg.c:-------------------------------------------------------------------*/
test_bmpjpg.c:	/* --- init logger --- */
test_bmpjpg.c:		return -1;
test_bmpjpg.c:        /* --- start egi tick --- */
test_bmpjpg.c:        /* --- prepare fb device --- */
test_bmpjpg.c:        fb_dev.fdfd=-1;
test_bmpjpg.c:		sprintf(path,"/tmp/FB%d-%02d-%02d_%02d:%02d:%02d.bmp",
test_bmpjpg.c:        	                   tm->tm_year+1900,tm->tm_mon+1,tm->tm_mday,tm->tm_hour, tm->tm_min,tm->tm_sec);
test_bmpjpg.c://        show_bmp(argv[1],&fb_dev,0,0,0);/* 0-BALCK_ON, 1-BLACK_OFF, 0,0-x0y0 */
test_color.c:/*-------------------------------------------------------------------
test_color.c:------------------------------------------------------------------*/
test_color.c:	/* --- init logger --- */
test_color.c:		return -1;
test_color.c:        /* --- start egi tick --- */
test_color.c:        /* --- prepare fb device --- */
test_color.c:        gv_fb_dev.fdfd=-1;
test_color.c:	EGI_BOX box={{0,0},{240-1,320-1,}};
test_color.c:		   egi_random_max(232),320-1-20,
test_color.c:		//printf("---k=%d,  subcolor: 0x%02X  ||||  color: 0x%02X ---\n",k,subcolor,color);
test_color.c:			step[i]= -delt[i];
test_color.c:		printf("------- subcolor[%d]:  Y=%d step[%d]=%d-------\n",
test_etouch.c:/*------------------------------------------------------------------
test_etouch.c:-------------------------------------------------------------------*/
test_etouch.c:                return -1;
test_etouch.c:                return -2;
test_etouch.c:                return -3;
test_etouch.c:                return -4;
test_etouch.c:                return -5;
test_etouch.c:        /* ---- start touch thread ---- */
test_etouch.c:                return -6;
test_etouch.c:        /* ----- start homepage ----- */
test_etouch.c:        page_home->routine(page_home); /* get into routine loop */
test_etouch.c:        printf("<-------  END  ------>\n");
test_fb.c:/*-----------------------------------------------------------------
test_fb.c:------------------------------------------------------------------*/
test_fb.c:                return -1;
test_fb.c:                return -2;
test_fb.c:                return -2;
test_fb.c:		return -1;
test_fb.c:                return -1;
test_fb.c:		return -1;
test_fb.c:                                           WEGI_COLOR_WHITE, -1, -1);   /* fontcolor, stranscolor,opaque */
test_fb.c:	egi_imgbuf_windisplay(eimg, &gv_fb_dev, -1, 0, 0, 0, 0, 240, 320 );
test_fb.c:        //        return -1;
test_fb.c:		return -1;
test_fb.c:                return -1;
test_fb.c:	egi_imgbuf_windisplay(logo1, &vfb, WEGI_COLOR_WHITE, 0, 0, px, py, logo1->width, logo1->height );
test_fb.c:                                           WEGI_COLOR_ORANGE, -1, -1);   /* fontcolor, stranscolor,opaque */
test_fb.c:                                           WEGI_COLOR_YELLOW, -1, -1);   /* fontcolor, stranscolor,opaque */
test_fb.c:                return -1;
test_fb.c:	egi_imgbuf_windisplay(logo2, &vfb, WEGI_COLOR_WHITE, 0, 0, px, py, logo2->width, logo2->height );
test_fb.c:                                           WEGI_COLOR_ORANGE, -1, -1);   /* fontcolor, stranscolor,opaque */
test_fb.c:                                           WEGI_COLOR_BLUE, -1, -1);   /* fontcolor, stranscolor,opaque */
test_fb.c:  /* ----- motion display ----- */
test_fb.c:        //printf("Flush pixel data in FILO, start  ---> ");
test_fb.c:	egi_imgbuf_windisplay(eimg, &gv_fb_dev, -1, i<<1, 0, 0, 240, eimg->width, eimg->height);
test_fb.c:	/* ----- Release and free sources ----- */
test_fb.c:	printf("---------- END -----------\n");
test_fft.c:/*------------------------------------------------------------------
test_fft.c:------------------------------------------------------------------*/
test_fft.c:#define FLOAT_INPUT	0	/* 1 -- input/out in float, or 0 -- in INT */
test_fft.c:int sfa=-1024;
test_fft.c:printf(" (-1024)<<10 =%d, (-1024)>>9 = %d \n",sfa<<10, sfa>>9);
test_fft.c:	int aexp=10;  /* exponent of 2,  MSB for Max. amplitude, Max amp=2^12-1 */
test_fft.c:        	return -1;
test_fft.c:        	return -1;
test_fft.c:		return -1;
test_fft.c:		      +(int)( 555*cos(2.0*MATH_PI*3000*i/16000-1.0*MATH_PI/4.0) )
test_fft.c:		      +(int)( ((1<<(aexp+1))-1)*cos(2.0*MATH_PI*5000*i/16000+MATH_PI/4.0) );
test_fft.c:do {    ///// ---------------------- LOOP TEST FFT ---------------------- //////
test_fft.c:	if( (k&(64-1))==0 )
test_fft.c:		 if( famp > 0.001 || famp < -0.001 ) {
test_fft.c:				nsamp=mat_uintCompSAmp(ffx[i])>>(2*(nexp-1)); // /(np/2)/(np/2) );
test_fft.c:	if( (k&(64-1))==0 )
test_fft.c:	   printf(" --- K=%d  time cost: %d us\n", k, tm_diffus(tm_start,tm_end));
test_fft.c:} while(1);  ///// ------------------  END LOOP TEST  ----------------- //////
test_geom.c:/*------------------------------------------------------------------
test_geom.c:-----------------------------------------------------------------*/
test_geom.c:        /* --- start egi tick --- */
test_geom.c:	/* --- init logger --- */
test_geom.c:		return -1;
test_geom.c:        /* --- prepare fb device --- */
test_geom.c:        gv_fb_dev.fdfd=-1;
test_geom.c:	/* --- load all symbol pages --- */
test_geom.c:	printf("--------- cost time in us: %d -------\n",tm_diffus(tms,tme));
test_geom.c:	EGI_BOX box={{0,0},{240-1,320-1,}};
test_geom.c:	draw_filled_rect(&gv_fb_dev,0,30,240-1,320-100);
test_geom.c:	 	draw_line(&gv_fb_dev,0,30+5+i*40,240-1,30+5+i*40);
test_geom.c: 	draw_line(&gv_fb_dev,0,30+5+6*40-1,240-1,30+5+6*40-1); //when i=6
test_geom.c:	 	draw_line(&gv_fb_dev,0+i*40,30+5,0+i*40,30+5+240-1);
test_geom.c: 	draw_line(&gv_fb_dev,0+6*40-1,30+5,0+6*40-1,30+5+240-1); //when i=6
test_geom.c:	/* ----------Prepare data and draw plines */
test_geom.c:	/* ----------Prepare data and draw plines */
test_img.c:/*------------------------------------------------------------------
test_img.c:------------------------------------------------------------------*/
test_img.c:                return -1;
test_img.c:                return -2;
test_img.c:                return -2;
test_img.c:                return -1;
test_img.c:  exit(-1);
test_img.c:#if 0	/* --- change blur_size --- */
test_img.c:		blur_size -=5;
test_img.c:		blur_size -=3;
test_img.c:#else   /* --- keep blur_size --- */
test_img.c:/* ------------------------------------------------------------------------------------
test_img.c:   egi_imgbuf_avgsoft2() with 1D array data.    --doubt !!??????
test_img.c:   This is because 2D array is much faster for sorting/picking data.!!!? ---doubt
test_img.c:-------------------------------------------------------------------------------- */
test_img.c:	                     -1, 1, &rad );		/*  init alpha, int pn, const int *param */
test_img.c:		printf("start windisplay img H%dxW%d.\n",softimg->height, softimg->width);
test_img.c:		egi_imgbuf_windisplay( softimg, &gv_fb_dev, -1,    	/* img, FB, subcolor */
test_img.c:				       0, 0, softimg->width, softimg->height   /* xw, yw, winw,  winh */
test_img.c:#endif /* ---- End test egi_imgbuf_avgsoft() ---- */
test_img.c: 	                     -1, 1, &rad );		/*  init alpha, int pn, const int *param */
test_img.c:		printf("start windisplay img H%dxW%d.\n",softimg->height, softimg->width);
test_img.c:		egi_imgbuf_windisplay( softimg, &gv_fb_dev, -1,    	/* img, FB, subcolor */
test_img.c:				       0, 0, softimg->width, softimg->height   /* xw, yw, winw,  winh */
test_img.c:#endif /* ---- End test egi_imgbuf_avgsoft2() ---- */
test_img.c:#if 0  /* ------------- Test egi_imgbuf_newFrameImg() ----------- */
test_img.c:	egi_imgbuf_windisplay( frameimg, &gv_fb_dev, -1,    	/* img, FB, subcolor */
test_img.c:			       30,30, eimg->width, eimg->height   /* xw, yw, winw,  winh */
test_img.c:        printf("<-------  END  ------>\n");
test_img.c:/* ------------------------- TEST RESULT ------------------
test_img.c:	 <<<  -----   processing a PNG image data, size 1024 x 901. RGB -----   >>>
test_img.c:		<<< ---- blur_size ==1 ---- >>>
test_img.c:	 <<<  -----   processing a PNG image data, size 1024 x 900 RGB -----   >>>
test_img.c:egi_imgbuf_avgsoft: --- alpha off ---
test_img.c:egi_imgbuf_avgsoft: malloc 2D array for ineimg->pcolros, palphas ...
test_img.c:egi_imgbuf_avgsoft2: --- alpha off ---
test_img.c:egi_imgbuf_avgsoft: --- alpha off ---
test_img.c:egi_imgbuf_avgsoft2: --- alpha off ---
test_img.c:egi_imgbuf_avgsoft: --- alpha off ---
test_img.c:egi_imgbuf_avgsoft2: --- alpha off ---
test_img.c:	 <<<  -----   Typical data for processing a PNG image data, size 532 x 709. -----   >>>
test_img.c:		<<< ---- blur_size ==1 ---- >>>
test_img.c:	 <<<  -----   processing a JPG image data, size 1000x500, frames 3 -----   >>>
test_img.c:egi_imgbuf_avgsoft: malloc 2D array for ineimg->pcolros, palphas ...
test_img.c:	 <<<  -----   processing a PNG image data, size 1200x1920, RGBA -----   >>>
test_img.c:egi_imgbuf_avgsoft: malloc 2D array for ineimg->pcolros, palphas ...
test_img.c:----------------------------------------------------------*/
test_math.c:/*------------------------------------------------------------------
test_math.c:------------------------------------------------------------------*/
test_math.c:/*--------------- test fix point ----------------*/
test_math.c://float a=-3.12322;
test_math.c:float a=-1.0*(1u<<15); //21);
test_math.c://float b=-34.39001;
test_math.c:float b=-1.0*(1u<<15); //21);
test_math.c:printf("\n---------------- Test Fix Point Functions ------------\n");
test_math.c:printf("fvs=fva-fvc=");
test_math.c:printf("Float compare: 	s=a-b=%15.9f, fvs=%15.9f\n", a-b, mat_floatFix(fvs));
test_math.c:/*--------------- test fix complex ----------------*/
test_math.c://float ar=0.707, aimg=-0.707;
test_math.c://float br=1.414, bimg=-1.414;
test_math.c:printf( "\n -------------- Test Fix Point Complex Functions ----------\n");
test_math.c:printf("Float compare: cs=ca-cb=%f%+fj      cps=cpa-cpb=%f%+fj\n",
test_math.c:				ar-br,aimg-bimg, mat_floatFix(cps.real), mat_floatFix(cps.imag));
test_math.c:                             ar*br-aimg*bimg,ar*bimg+br*aimg, mat_floatFix(cpm.real), mat_floatFix(cpm.imag));
test_math.c://                             (br*ar+aimg*bimg)/(br*br+bimg*bimg),(-ar*bimg+br*aimg)/(br*br+bimg*bimg),
test_math.c:                             (br*ar+aimg*bimg)/(ar*ar+aimg*aimg),(ar*bimg-br*aimg)/(ar*ar+aimg*aimg),
test_math.c:/*----------------------- test fix point FFT --------------------------
test_math.c:	p118-120
test_math.c:----------------------------------------------------------------------*/
test_math.c:		exp=16-i-1;
test_math.c:	return -1;
test_math.c:float x[NN];//={ 0.3535, 0.3535, 0.6464, 1.0607, 0.3535, -1.0607, -1.3535, -0.3535 };
test_math.c:		/*  move i(j) to i(0), then left shift (exp-j) bits and assign to ffnin[i](exp-j) */
test_math.c:		ffnin[i] += ((i>>j)&1) << (exp-j-1);
test_math.c:/* 3. stage 2^1 -> 2^2 -> 2^3 -> 2^4....->NN point DFT */
test_math.c:        	/* get coupling x order index: ffeven order index -> x order index */
test_math.c:	        kx=((i+ (1<<(s-1))) & ((1<<s)-1)) + ((i>>s)<<s); /* (i+2^(s-1)) % (2^s) + (i/2^s)*2^s) */
test_math.c:	        kp= (i<<(exp-s)) & ((1<<exp)-1); // k=(i*1)%8
test_math.c:/* stage 1: Basic 2-point DFT */
test_math.c:	if( (i&(2-1)) == 0 ) { /* i%2 */
test_math.c:		ffodd[i]=MAT_FCPVAL( x[ffnin[i-1]]-x[ffnin[i]], 0.0);
test_math.c:		printf(" stage 1: ffodd[%d]=x(%d)-x(%d)\n", i,ffnin[i-1],ffnin[i]);
test_math.c:	/* get coupling x order index: ffeven order index -> x order index */
test_math.c:	kx= ( (i+ (1<<(2-1)) )&((1<<2)-1) )+((i>>2)<<2); /* (i+2)%4+(i/4*4 */
test_math.c:	kp=(i<<(exp-2))&(8-1);  // kp=(i*2)%8;
test_math.c:        /* get coupling x order index: ffeven order index -> x order index */
test_math.c:        kx=( (i+ (1<<(3-1)) )&((1<<3)-1) )+((i>>3)<<3); /* (i+4)%8+(i/8*8) */
test_math.c:        kp= (i<<(exp-3)) & (8-1); // k=(i*1)%8
test_math.c:		if(i==384 || famp > 0.001 || famp < -0.001 || ffodd[i].real.num>1 || ffodd[i].imag.num>1)
test_math.c:			printf("---X(%d)---\n ",i);
test_math.c:		if(i==384 || famp > 0.001 || famp < -0.001|| ffodd[i].real.num>1 || ffodd[i].imag.num>1)
test_math.c:			printf("---X(%d)---\n ",i);
test_math.c:printf("--------- K=%d -------- \n",k);
test_resizeimg.c:/*------------------------------------------------------------------
test_resizeimg.c:------------------------------------------------------------------*/
test_resizeimg.c:                return -1;
test_resizeimg.c:                return -2;
test_resizeimg.c:                return -2;
test_resizeimg.c:                return -1;
test_resizeimg.c:	egi_imgbuf_windisplay( blockimg, &gv_fb_dev, -1,    	/* img, FB, subcolor */
test_resizeimg.c:			       blockimg->width, blockimg->height   /* winw,  winh */
test_resizeimg.c:			       //0, 0, eimg->width>240?240:eimg->width , eimg->height   /* xw, yw, winw,  winh */
test_resizeimg.c:		exit(-1);
test_resizeimg.c:	egi_imgbuf_windisplay( eimg, &gv_fb_dev, -1,    	/* img, FB, subcolor */
test_resizeimg.c:			       eimg->width, eimg->height   /* winw,  winh */
test_resizeimg.c:   #if  1 /* ----- scale step 12/240 for W240H320 image  -------- */
test_resizeimg.c:   #else  /* ----- scale step 1/240 for W240H320 image  -------- */
test_resizeimg.c:		exit(-1);
test_resizeimg.c:	if(i>240-1) {
test_resizeimg.c:                                           (i-240)/2,0, 320, 240 );   /* px, py, height, width */
test_resizeimg.c:	egi_imgbuf_windisplay( eimg, &gv_fb_dev, -1,    	/* img, FB, subcolor */
test_resizeimg.c:			       i>240 ? (i-240)/2:0,		/* xw  */
test_resizeimg.c:			       i>240 ? (i-240)*pimg->height/2/pimg->width:0, 	/* yw  */
test_resizeimg.c:			       eimg->width, eimg->height   /* winw,  winh */
test_resizeimg.c:			       //0, 0, eimg->width>240?240:eimg->width , eimg->height   /* xw, yw, winw,  winh */
test_resizeimg.c:        printf("<-------  END  ------>\n");
test_sndfft.c:/*------------------------------------------------------------------
test_sndfft.c:------------------------------------------------------------------*/
test_sndfft.c:	sx0=(240-spwidth/(ns-1)*(ns-1))/2;
test_sndfft.c:		sdx[i]=sx0+(spwidth/(ns-1))*i;
test_sndfft.c:		return -1;
test_sndfft.c:		return -1;
test_sndfft.c:		return -2;
test_sndfft.c:                return -1;
test_sndfft.c:                return -2;
test_sndfft.c:                return -2;
test_sndfft.c:                return -1;
test_sndfft.c:                return -1;
test_sndfft.c:                return -2;
test_sndfft.c:                return -1;
test_sndfft.c:                return -2;
test_sndfft.c:        system("amixer -D hw:0 set Capture 85%");
test_sndfft.c:        system("amixer -D hw:0 set 'ADC PCM' 85%");
test_sndfft.c:                                     WEGI_COLOR_WHITE, -1, -1);   /* fontcolor, stranscolor,opaque */
test_sndfft.c://		printf(" --- \n");
test_sndfft.c:                if(ret == -EPIPE ) {
test_sndfft.c:                                memset( buff+ret*frame_size, 0, (chunk_frames-ret)*frame_size);
test_sndfft.c:		/* ---  Run FFT with INT nx[]  --- */
test_sndfft.c:#if 0  /* -----  1. Symmetric spectrum diagram ----- */
test_sndfft.c:			sdy[i]=240-( mat_uintCompAmp( ffx[i*ng])>>(nexp-1 -5) ); //(nexp-1) );
test_sndfft.c:#else  /* -----  2. Normal spectrum diagram ----- */
test_sndfft.c:			sdy[i]=240-( mat_uintCompAmp( ffx[i*(ng>>1)])>>(nexp-1 -3) ); //(nexp-1) );
test_sndfft.c:			//sdy[i]=240-( mat_uint32Log2( mat_uintCompAmp(ffx[i*(ng>>1)]) )<<3  );
test_sndfft.c:				avg+=mat_uintCompAmp(ffx[i*step])>>(nexp-1 -3);
test_sndfft.c:			sdy[i]=240-avg/step;
test_sndfft.c:		for(i=1; i<ns-1; i++) {  /* i=0 is DC */
test_sndfft.c:			//draw_dot(&gv_fb_dev,sdx[i],240-sdy[i]);
test_sndfft.c:	        if (ret == -EPIPE) {
test_sndfft.c:        printf("<-------  END  ------>\n");
test_stock.c:/*----------------------------------------------------------------------------------------------
test_stock.c:				---try to increase request frequency.
test_stock.c:------------------------------------------------------------------------------------------------*/
test_stock.c:			 * then save the latest data into data_point[num-1]
test_stock.c:/*------------------------------------
test_stock.c:------------------------------------*/
test_stock.c:	/* --- init logger --- */
test_stock.c:		return -1;
test_stock.c:        /* --- start egi tick --- */
test_stock.c:        /* --- prepare fb device --- */
test_stock.c:        gv_fb_dev.fdfd=-1;
test_stock.c:	/* --- load all symbol pages --- */
test_stock.c:			    2x(2<<6)=128 <=120  --- YES!  3x(2<<5)=96 --- NOPE!
test_stock.c:			     get navg_th average of data_point[]  = (data[0]+data[1]...data[navg-1])/navg  */
test_stock.c:	int npstore=0; /*0 to num-1; index of current data_point[npstore] for compression operation . */
test_stock.c:	/* Float Precision: 6-7 digitals, double precisio: 15-16 digitals */
test_stock.c:	int   wh=210-60; 		/* height of display window */
test_stock.c:	float fupp_dev=0; /* fupp_dev=fdmax-fbench, if fdmax>fbench;  OR fupp_dev=0;  */
test_stock.c:	float flow_dev=0; /* flow_dev=fbench-fdmin, if fdmin<fbench;  OR flow_dev=0;  */
test_stock.c:	int mincount; /* tm_local->hour * 60 +tm_local->min */
test_stock.c:	int seccount; /* tm_local->hour*3600+tm_local->min*60+tm_local->sec */
test_stock.c:	for(i=0;i<num-1;i++) {
test_stock.c:		pxy[i].x=240/(num-1)*i;
test_stock.c:	pxy[num-1].x=240-1;
test_stock.c:	//draw_filled_rect(&gv_fb_dev,0,30,240-1,320-1);
test_stock.c:	 	draw_line(&gv_fb_dev,0,offy+wh/2-hlgap*i,240-1,offy+wh/2-hlgap*i);
test_stock.c:		draw_wline(&gv_fb_dev,20+i*20,40,20+i*20,320-1,9);
test_stock.c:	seccount=tm_local->tm_hour*3600+tm_local->tm_min*60+tm_local->tm_sec;
test_stock.c:		if( ( seccount >=15*3600+30 || seccount < 9*3600+30*60 - 10 )
test_stock.c:         *	1. Noon recess starts at 11:30:10, while data stream stop updating. ---2019-4-19
test_stock.c:			data_point[num-1]=atof(cstr_split_nstr(data,",",pn));/* get current point */
test_stock.c:				return -1;
test_stock.c:			fbench = data_point[num-1]-atof(pt);  /* yesterday's point=current-dev */
test_stock.c:			data_point[num-1]=atof(cstr_split_nstr(data,",",pn+1));/* get current point */
test_stock.c:				return -2;
test_stock.c://		fbench=data_point[num-1];
test_stock.c:		fdmax=data_point[num-1];
test_stock.c:		fdmin=data_point[num-1];
test_stock.c:		low_limit=fbench-famp;
test_stock.c:			data_point[i]=data_point[num-1];//fbench;
test_stock.c:     printf("Start data save and compression  ((( ---> ");
test_stock.c:#if 0		/* METHOD 1: shift data and push point value into data_point[num-1] */
test_stock.c:		memmove(data_point,data_point+1,sizeof(data_point)-sizeof(data_point[0]));
test_stock.c:#if 0		/* METHOD 2: Common_Average compression, but keep lastest data_point[num-1]  */
test_stock.c:		for(i=0;i<num-1;i++) {
test_stock.c:			data_point[i]=( data_point[i]*( (num-i)*1 )+ data_point[i+1])
test_stock.c:							/ ( (num-i)*1+1 ); /* SMOOTH_BIA AVERAGE */
test_stock.c:		for(i=0;i<num-1;i++) { /* data_point[num-1] unchanged */
test_stock.c:			data_point[i]=data_point[i]*(num-2-i)/(num-2)+data_point[i+1]*i/(num-2);
test_stock.c:		memmove(data_point,data_point+1,sizeof(data_point)-sizeof(data_point[0]));
test_stock.c:			/* 2. If end of round: reset npstore, !!!!! keep data_point[num-1] alway uncompressed !!!! */
test_stock.c:			else if(npstore == num-1) { /* data[num-1] never compress, reset npstore to 0 */
test_stock.c:				npstore=0;  /* data[num-1] never compress, reset npstore to 0 */
test_stock.c:		for( ++k; k<num-1; k++)
test_stock.c:		memmove(data_point+(k+1), data_point+(k+1)+1, sizeof(data_point[0]) * (num-1-(k+1)) );
test_stock.c:		memmove(data_point,data_point+1,sizeof(data_point)-sizeof(data_point[0]));
test_stock.c:     printf(" ---> End.  ))) \n");
test_stock.c:                data_point[num-1]=atof(pt);
test_stock.c:					tm_local->tm_hour,tm_local->tm_min,tm_local->tm_sec,data_point[num-1]);
test_stock.c:		if(data_point[num-1] < fdmin) {
test_stock.c:			fdmin=data_point[num-1];
test_stock.c:				flow_dev=fbench-fdmin;
test_stock.c:		else if(data_point[num-1] > fdmax) {
test_stock.c:			fdmax=data_point[num-1];
test_stock.c:				fupp_dev=fdmax-fbench;
test_stock.c:		/* Init value as we set before,fdmix=fdmax=data_point[num-1]
test_stock.c:			  	fupp_dev=fdmax-fbench;
test_stock.c:				flow_dev=fbench-fdmin;
test_stock.c:			upp_ng=ng-low_ng;
test_stock.c:			low_ng=ng-upp_ng;
test_stock.c:		low_limit=fbench-low_ng*hlgap/funit;
test_stock.c:		printf("fupp_dev*funit/hlgap=%0.1f <----> upp_ng=%d \n",fupp_dev*funit/hlgap,upp_ng);
test_stock.c:		printf("flow_dev*funit/hlgap=%0.2f <----> low_ng=%d \n",flow_dev*funit/hlgap,low_ng);
test_stock.c:	printf("Update Pxy[] for drawing.  start  ---> ");
test_stock.c:		 	pxy[i].y=offy-(data_point[i]-fbench)*funit;
test_stock.c:		 	pxy[i].y=offy+(fbench-data_point[i])*funit;
test_stock.c:	printf("Flush pixel data in FILO, start  ---> ");
test_stock.c:	printf("Draw bench mark line, start  ---> ");
test_stock.c: 	draw_line(&gv_fb_dev,0,offy,240-1,offy);
test_stock.c:	printf("Draw poly lines from Pxy[], start  ---> ");
test_stock.c:	/* 3. ----- Draw marks and symbols ------ */
test_stock.c:	printf("Draw marks and symbols, start  ((( ---> ");
test_stock.c:                                        	1, 80, chart_y0+upp_ng*hlgap-20 ,strdata); /* transpcolor, x0,y0, str */
test_stock.c:                                        	1, 80, chart_y0-20 ,strdata); /* transpcolor, x0,y0, str */
test_stock.c:                                        	1, 80, chart_y0+wh-20, strdata); /* transpcolor, x0,y0, str */
test_stock.c:		py=offy-(fdmax-fbench)*funit;
test_stock.c:		py=offy+(fbench-fdmax)*funit;
test_stock.c:                                        	1, 0, py-20 ,strdata); /* transpcolor, x0,y0, str */
test_stock.c:		py=offy-(fdmin-fbench)*funit;
test_stock.c:		py=offy+(fbench-fdmin)*funit;
test_stock.c:                                        	1, 0, py-20 ,strdata); /* transpcolor, x0,y0, str */
test_stock.c:	sprintf(strdata,"%0.2f",data_point[num-1]);
test_stock.c:        // move with pxy              	1, 240-70, pxy[num-1].y-20, strdata); /* transpcolor, x0,y0, str */
test_stock.c:					1, 240-70, chart_y0-40, strdata); /* display on top */
test_stock.c:	//			  240-70, pxy[num-1].y-20-15, 240-70+60, pxy[num-1].y-20);
test_stock.c:	if(data_point[num-1]>fbench)symcolor=WEGI_COLOR_RED;
test_stock.c:	else {	symcolor = WEGI_COLOR_GREEN; }	sprintf(strdata,"%+0.2f",data_point[num-1]-fbench);
test_stock.c:        // move with pxy                     	1, 240-70, pxy[num-1].y-20-20, strdata); /* transpcolor, x0,y0, str */
test_stock.c:					1, 90, chart_y0-40, strdata); /*fixed position, display on top */
test_stock.c:	sprintf(strdata,"%%%+0.2f",(data_point[num-1]-fbench)*100/fbench);
test_stock.c:                                       	1, 0, chart_y0-40, strdata); /* transpcolor, x0, y0, str */
test_stock.c:	printf(" ---> End.  ))) \n");
test_stock.c:		//				1, 20,320-35, "Trade Time" );
test_stock.c:		if(tprice-yprice>0)symcolor=WEGI_COLOR_RED;
test_stock.c:		sprintf(strdata,"%s   %0.2f   %%%+0.2f",favor_stock[wcount%3],tprice,(tprice-yprice)*100/yprice);
test_stock.c:						1, 5,chart_y0+wh+10, strdata ); //320-35
test_sym.c:/*-----------------------------------------------------------------
test_sym.c:------------------------------------------------------------------*/
test_sym.c:	EGI_BOX subbox={{0,150},{240-1, 260}};
test_sym.c:        EGI_BOX box={{0,0},{240-1,320-1,}};
test_sym.c:	/* --- init logger --- */
test_sym.c:		return -1;
test_sym.c:        /* --- start egi tick --- */
test_sym.c:	/* --- load sym pages --- */
test_sym.c:		return -2;
test_sym.c:        /* --- prepare fb device --- */
test_sym.c:		return -1;
test_sym.c:	symbol_writeFB(&gv_fb_dev, &sympg_heweather, WEGI_COLOR_WHITE, -1, 70, 250, 0, 0);
test_sym.c:	char *strtest="- and he has certain parcels...	\
test_sym.c: 	symbol_strings_writeFB(&gv_fb_dev, &sympg_testfont, 240, subln, -9, WEGI_COLOR_ORANGE,
test_sym.c:		return -1;
test_sym.c:		//if(strcmp(strtm,"-->")==0) {
test_sym.c:			pt=fgets(strsub+len,subln*32-len-1,fil);
test_sym.c:			if(len>=subln*32-1)
test_sym.c:	 	symbol_strings_writeFB(&gv_fb_dev, &sympg_testfont, 200, subln, -5, WEGI_COLOR_ORANGE,
test_tonefft.c:/*----------------------------------------------------------------------
test_tonefft.c:-----------------------------------------------------------------------*/
test_tonefft.c:static int16_t Mamp=(1U<<15)-1;     		/* Max. amplitude for format S16 */
test_tonefft.c:/*-------------------------------------
test_tonefft.c: -------------------------------------*/
test_tonefft.c:	if (ret == -EPIPE) {
test_tonefft.c:/*--------------------
test_tonefft.c:---------------------*/
test_tonefft.c:	sx0=(240-spwidth/(ns-1)*(ns-1))/2;
test_tonefft.c:		sdx[i]=sx0+(spwidth/(ns-1))*i;
test_tonefft.c:		return -1;
test_tonefft.c:		return -1;
test_tonefft.c:                return -1;
test_tonefft.c:                return -2;
test_tonefft.c:                return -2;
test_tonefft.c:                return -2;
test_tonefft.c:                return -1;
test_tonefft.c:                return -1;
test_tonefft.c:                return -2;
test_tonefft.c:        system("amixer -D hw:0 set Capture 85%");
test_tonefft.c:        system("amixer -D hw:0 set 'ADC PCM' 85%");
test_tonefft.c:                                     WEGI_COLOR_YELLOW, -1, -1);   /* fontcolor, stranscolor,opaque */
test_tonefft.c:		return -1;
test_tonefft.c:			j-=6;	/* increase LOW freq span */
test_tonefft.c:			j-=1;
test_tonefft.c:                        buff[k]= ( fp16Sin[ (1024/j*k) & (1024-1) ]*(Mamp>>2) )>>16;
test_tonefft.c:				avg+=mat_uintCompAmp(ffx[ nk[i]+k ])>>(nexp-1 -4); /* get amplitude */
test_tonefft.c:			sdy[i]=240-avg/step;
test_tonefft.c:		for(i=0; i<ns-1; i++) {
test_tonefft.c:			//draw_dot(&gv_fb_dev,sdx[i],240-sdy[i]);
test_tonefft.c:                		      WEGI_COLOR_RED, -1,     /* fontcolor, int transpcolor */
test_tonefft.c:				      strp, -1);		 /* string, opaque */
test_tonefft.c:        printf("<-------  END  ------>\n");
Binary file test_txt matches
test_txt.c:/*------------------------------------------------------------------
test_txt.c:------------------------------------------------------------------*/
test_txt.c:                return -1;
test_txt.c:                return -2;
test_txt.c:                return -2;
test_txt.c:                return -1;
test_txt.c:	/* ------ prepare TXT type ebox ------- */
test_txt.c:	memo_txt->utxt=utext;
test_txt.c:			                eboxW-50, 60, 	/* width, height(adjusted as per nl and fw) */
test_txt.c:			                -1, 		/* int frame, -1=no frame */
test_txt.c:	ebox_txt->frame_alpha=frame_none; //100;
test_txt.c:	ebox_txt->x0=pt.x;
test_txt.c:	ebox_txt->y0=pt.y;
test_txt.c:	ebox_txt->activate(ebox_txt);
test_txt.c:	ebox_txt->need_refresh=true;
test_txt.c:	ebox_txt->refresh(ebox_txt);
test_txt.c:	ebox_txt->sleep(ebox_txt);
test_txt.c:	ebox_txt->free(ebox_txt);
test_txt.c:memo_txt->utxt=utext;
test_txt.c:		                eboxW-50, 60, 	/* width, height(adjusted as per nl and fw) */
test_txt.c:		                frame_round_rect,   /* int frame, -1=no frame >100 use frame_img */
test_txt.c:		                -1 //WEGI_COLOR_BLUE   /* prmcolor, -1 transparent*/
test_txt.c:ebox_txt->frame_alpha=100;
test_txt.c:ebox_txt->activate(ebox_txt);
test_txt.c:box.endxy=(EGI_POINT){pb.x-ebox_txt->width, pb.y-ebox_txt->height};
test_txt.c:		ebox_txt->x0=pn.x;
test_txt.c:		ebox_txt->y0=pn.y;
test_txt.c:		ebox_txt->need_refresh=true;
test_txt.c:		ebox_txt->refresh(ebox_txt);
test_txt.c:	ebox_txt->sleep(ebox_txt);
test_txt.c:	ebox_txt->free(ebox_txt);
test_txt.c:        printf("<-------  END  ------>\n");
test_zoomimg.c:/*------------------------------------------------------------------
test_zoomimg.c:------------------------------------------------------------------*/
test_zoomimg.c:                return -1;
test_zoomimg.c:                return -2;
test_zoomimg.c:                return -2;
test_zoomimg.c:                return -1;
test_zoomimg.c:   block_width=pimg->width;
test_zoomimg.c:   for(i=0; i< pimg->width/2; i+=(block_width*4/240+2) ) { //i+=20 ) {
test_zoomimg.c:	block_width=pimg->width-(i<<1);
test_zoomimg.c:	egi_imgbuf_windisplay( zoomimg, &gv_fb_dev, -1,    	/* img, FB, subcolor */
test_zoomimg.c:        printf("<-------  END  ------>\n");
tmp_app.c:/*-----------------------------  touch_home.c ----------------------------------
tmp_app.c:2. Keep enough time-gap for XPT to prepare data in each read-session,
tmp_app.c:3. Hold LCD-Touch module carefully, it may influence touch-read data.
tmp_app.c:5. if sx0=sy0=0, it means that last TOUCH coordinate is invalid or pen-up.
tmp_app.c:4. apply mutli-process for separative jobs: reading-touch-pad, CLOCK,texting,... etc.
tmp_app.c:5. systme()... sh -c ...
tmp_app.c:6. btn-press and btn-release signal
tmp_app.c:--------------------------------------------------------------------------*/
tmp_app.c:		EGI_PLOG(LOGLV_INFO," From file %s,  %s(): LOGLV_INFO---%d--- \n",__FILE__,__FUNCTION__,i);
tmp_app.c:		EGI_PLOG(LOGLV_ERROR,"%s(): LOGLV_ERROR---%d--- \n",__FUNCTION__,i);
tmp_app.c:		EGI_PLOG(LOGLV_INFO,"log3: LOGLV_INFO---- %d ---- \n",i);
tmp_app.c:/*  ---------------------  MAIN  ---------------------  */
tmp_app.c:	/* --- start egi tick --- */
tmp_app.c:		printf("egi_random_max(-5):%d\n",egi_random_max(-5));
tmp_app.c:	/* --- init log --- */
tmp_app.c:	/* --- open spi dev --- */
tmp_app.c:	/* --- prepare fb device --- */
tmp_app.c:	/* ---- OBSELTE!!!! Clash with tm_tick_settimer() !  set timer for time display ---- */
tmp_app.c:	/* ---- start touch thread ---- */
tmp_app.c:	//printf(" -3%%100=%d \n",(-3)%100);
tmp_app.c:	//printf(" -203%%100=%d \n",(-203)%100);
tmp_app.c:	printf("egi_random_max(-10)=%d \n",egi_random_max(-10));
tmp_app.c:	/* ------  create txt type ebox objects -------*/
tmp_app.c:	if(ebox_note == NULL)return -1;
tmp_app.c:	EGI_DATA_TXT *note_txt=(EGI_DATA_TXT *)(ebox_note->egi_data);
tmp_app.c:	if(ebox_clock == NULL)return -2;
tmp_app.c:	EGI_DATA_TXT *clock_txt=(EGI_DATA_TXT *)(ebox_clock->egi_data);
tmp_app.c:	if(ebox_memo == NULL)return -3;
tmp_app.c:	/* ------------   home_button eboxes definition  ------------------ */
tmp_app.c:  /* test -------- imgbuf funcs-------- */
tmp_app.c:	/* ---- start roaming threads ---- */
tmp_app.c:	/* test ------- touch loopread ------- */
tmp_app.c:	fb_cpyto_buf(&gv_fb_dev, 50, 0, 50+50-1, 320-1, buf);
tmp_app.c:				printf("------- touch_data: releaseing -------\n");
tmp_app.c:			/* PCM 0-999 */
tmp_app.c:			 setvol=(280-hvol)*1000/(280-30);
tmp_app.c:			fb_cpyfrom_buf(&gv_fb_dev, 50, 0, 50+50-1, 320-1, buf);
tmp_app.c:			draw_filled_rect(&gv_fb_dev,50,280,50+50-1,hvol);
tmp_app.c:	/* test ---- IW RSSI ------ */
tmp_app.c:#if 0 /* test ----- egi txtbox read file ---------- */
tmp_app.c:	/* --- clear screen with BLACK --- */
tmp_app.c:	draw_filled_rect(&gv_fb_dev,0,0,240-1,320-1);
tmp_app.c:	/* --- load screen paper --- */
tmp_app.c:	/* test: ----- image scale,page dispearing effect ---- */
tmp_app.c:       	fb_cpyto_buf(&gv_fb_dev, 0, 0, 240-1, 320-1, buf);
tmp_app.c:	for(wid=240;wid>1;wid-=1)
tmp_app.c:		fb_cpyfrom_buf(&gv_fb_dev,0,0,wid-1,hgt-1,nbuf);
tmp_app.c:	/* test: --------- image rotate ----------- */
tmp_app.c:        fb_cpyto_buf(&gv_fb_dev, centx-sq/2, centy-sq/2, centx+sq/2, centy+sq/2, buf); /* buf */
tmp_app.c:        fb_cpyto_buf(&gv_fb_dev, centx-sq2/2, centy-sq2/2, centx+sq2/2, centy+sq2/2, buf2); /* buf2 */
tmp_app.c:	struct egi_point_coord  x0y0={centx-sq/2,centy-sq/2};
tmp_app.c:	struct egi_point_coord  x0y02={centx-sq2/2,centy-sq2/2};
tmp_app.c:			sign=-sign;
tmp_app.c:			printf("sign=-sign=%d\n",sign);
tmp_app.c:		/* --- get square rotation map ---- */
tmp_app.c:		/* --- get  annulus rotaton map --- */
tmp_app.c:		mat_pointrotate_fpAnnulusMap(sq2, 1, -j, centxy, SQMat2); /* ANMat = SQMat */
tmp_app.c:	/* --- print and display symbols --- */
tmp_app.c:		dict_writeFB_symb20x15(&gv_fb_dev,1,(30<<11|45<<5|10),i,30+i*15,320-40);
tmp_app.c:		exit(-2);
tmp_app.c:		exit(-2);
tmp_app.c:		exit(-2);
tmp_app.c:	/*------------------ Load Symbols ------------------*/
tmp_app.c:		exit(-2);
tmp_app.c:		exit(-2);
tmp_app.c:		exit(-2);
tmp_app.c:	/* load icons for home head-bar*/
tmp_app.c:		exit(-2);
tmp_app.c:		exit(-2);
tmp_app.c:	/* --------- test:  print all symbols in the page --------*/
tmp_app.c:	        symbol_writeFB(&gv_fb_dev,&sympg_icons, -1, 0 , 30*i, 0, i);
tmp_app.c:#if 0 /* test  ----------------- egi_pic --------------- */
tmp_app.c:	/* -------- to search jpg files ------ */
tmp_app.c:	/* ------- display jpg files ------- */
tmp_app.c:	EGI_BOX	 box={ {0,0},{240-230-1,320-130/2-1} };
tmp_app.c:	//EGI_BOX  box={ {0-100,0-150},{240-1-100,320-1-150} };
tmp_app.c:	//EGI_BOX  box={ {0,0},{240-picw-poffx-1,320-pich-poffy-symh-1}};
tmp_app.c:	data_pic->title="Happy New Year 2019!";
tmp_app.c:	   exit(-1);
tmp_app.c:	fb_scale_pixbuf(imgbuf.width, imgbuf.height, data_pic->imgbuf->width, data_pic->imgbuf->height,
tmp_app.c:				imgbuf.imgbuf, data_pic->imgbuf->imgbuf);
tmp_app.c:	pic_box->x0=pxy.x;
tmp_app.c:	pic_box->y0=pxy.y;
tmp_app.c:	pic_box->free(pic_box);
tmp_app.c:#if 0 /* test -----  egi_display_msgbox() and egi_push_datatxt( ) ----- */
tmp_app.c:	-----hello--- \
tmp_app.c:	-----hello--- \
tmp_app.c:	-----hello---";
tmp_app.c:    pvmsgbox=egi_msgbox_create(pvmsg, -1, WEGI_COLOR_ORANGE);
tmp_app.c:    if(pvmsgbox==NULL)exit(-1);
tmp_app.c:	/* ------------------ test list --------------------- */
tmp_app.c:	/* ----------- activate pages and its listed eboxes ---------*/
tmp_app.c:	/* ----- set default color ----- */
tmp_app.c:        fbset_color((30<<11)|(10<<5)|10);/* R5-G6-B5 */
tmp_app.c:	/* ----- test:  home page ----- */
tmp_app.c:	page_home->routine(page_home); /* get into routine loop */
tmp_app.c:	printf("------- Eixt home page --------\n");
tmp_app.c:/* ===============-------------(((  MAIN LOOP  )))-------------================= */
tmp_app.c:		/*------ relate with number of touch-read samples -----*/
tmp_app.c:		/*--------- read XPT to get avg tft-LCD coordinate --------*/
tmp_app.c:		ret=xpt_getavg_xy(&sx,&sy); /* if fail to get touched tft-LCD xy */
tmp_app.c:		/* -------  put PEN-UP status events here !!!! ------- */
tmp_app.c:			/* get hour-min-sec and display */
tmp_app.c:				if(ebox_note->x0 <=60  ) delt=10;
tmp_app.c:				if(ebox_note->x0 >=300 ) delt=-10;
tmp_app.c:				ebox_note->x0 += delt; //85 - (320-60)
tmp_app.c:				ebox_note->refresh(ebox_note);
tmp_app.c:				//ebox_memo->y0 += 3;
tmp_app.c:				//ebox_memo->refresh(ebox_memo);
tmp_app.c:			/* -----ONLY if tm changes, update txt and clock */
tmp_app.c:			if( strcmp(note_txt->txt[1],tm_strbuf) !=0 )
tmp_app.c:				strncpy(note_txt->txt[1],tm_strbuf,10);
tmp_app.c:				/* -----refresh CLOCK ebox---- */
tmp_app.c:				//wirteFB_str20x15(&gv_fb_dev, 1, (30<<11|45<<5|10), tm_strbuf, 60, 320-38);
tmp_app.c:				strncpy(clock_txt->txt[1],tm_strbuf,10);
tmp_app.c:				//clock_txt->color += (6<<8 | 4<<5 | 2 );
tmp_app.c:				ebox_clock->prmcolor = egi_color_random(all);
tmp_app.c:				ebox_clock->refresh(ebox_clock);
tmp_app.c:			/* get year-mon-day and display */
tmp_app.c:			strncpy(note_txt->txt[0],tm_strbuf,22);
tmp_app.c:			/* ----------- test rotation map------------- */
tmp_app.c:			//printf("--- XPT_READ_STATUS_COMPLETE ---\n");
tmp_app.c:	/* -----------------------  Touch Event Handling  --------------------------*/
tmp_app.c:			printf("a page ebox '%s' is hit.\n",hitbtn->tag);
tmp_app.c:		/*---  get index of pressed ebox and activate the button ----*/
tmp_app.c:				case 4: /*--------ON/OFF:  disk play ---------*/
tmp_app.c:						printf("disk on. ----- \n");
tmp_app.c:				case 5: /*-------ON/OFF:  memo txt display -------*/
tmp_app.c:					if(ebox_memo->status!=status_active)
tmp_app.c:						ebox_memo->activate(ebox_memo);
tmp_app.c:					else if(ebox_memo->status==status_active)
tmp_app.c:						ebox_memo->sleep(ebox_memo);
tmp_app.c:				case 7: /*------  memo txt refresh -------*/
tmp_app.c:					ebox_memo->refresh(ebox_memo);
